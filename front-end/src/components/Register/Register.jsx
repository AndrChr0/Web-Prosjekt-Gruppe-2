//Front end security had been partly generated by ChatGPT)
import React, { useState } from "react";
import axios from "axios";
import { useNavigate, Link } from "react-router-dom";
import "./Register.css";

const Register = () => {
  const [credentials, setCredentials] = useState({
    email: "",
    password: "",
    role: "student", // Default to 'student'
    firstName: "",
    lastName: ""
  });
  const [confirmPassword, setConfirmPassword] = useState("");
  const [validationErrors, setValidationErrors] = useState({ email: "", password: "", confirmPassword: "" });
  const [registrationError, setRegistrationError] = useState("");
  const navigate = useNavigate();


  const validateEmail = (email) => {
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  const validatePassword = (password) => {
    const minLength = 8;
    const hasNumbers = /\d/.test(password);
    const hasUpper = /[A-Z]/.test(password);
    const hasLower = /[a-z]/.test(password);
    const hasSpecial = /[\W_]/.test(password);
    return password.length >= minLength && hasNumbers && hasUpper && hasLower && hasSpecial;
  };


  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "confirmPassword") {
      setConfirmPassword(value);
      setValidationErrors({ ...validationErrors, confirmPassword: value === credentials.password ? "" : "Passwords do not match" });
    } else {
      setCredentials({ ...credentials, [name]: value });
      if (name === "email") {
        setValidationErrors({ ...validationErrors, email: validateEmail(value) ? "" : "Invalid email format" });
      } else if (name === "password") {
        setValidationErrors({
          ...validationErrors,
          password: validatePassword(value) ? "" : "Password must be 8+ characters and include upper, lower, numbers, and special characters",
          confirmPassword: value === confirmPassword ? "" : "Passwords do not match"
        });
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validationErrors.email || validationErrors.password || validationErrors.confirmPassword) {
      setRegistrationError("Please correct the errors before submitting.");
      return;
    }
    try {
      await axios.post("http://localhost:5151/users/register", credentials);
      navigate("/login"); // Redirect to login page after successful registration
    } catch (error) {
      setRegistrationError("Failed to register. Please check your input and try again.");
      console.error("Registration failed:", error.response?.data || error.message);
    }
  };

  return (
    <div className="register-container">
      <form className="register-form" onSubmit={handleSubmit}>
        <input
          type="text"
          name="firstName"
          placeholder="First Name"
          value={credentials.firstName}
          onChange={handleChange}
          required
          className="login-input"
        />
        <input
          type="text"
          name="lastName"
          placeholder="Last Name"
          value={credentials.lastName}
          onChange={handleChange}
          required
          className="login-input"
        />
        <input
          type="email"
          name="email"
          placeholder="Email"
          value={credentials.email}
          onChange={handleChange}
          required
          className="login-input"
        />
        {validationErrors.email && <div className="error-message">{validationErrors.email}</div>}
        <input
          type="password"
          name="password"
          placeholder="Password"
          value={credentials.password}
          onChange={handleChange}
          required
          className="login-input"
        />
        {validationErrors.password && <div className="error-message">{validationErrors.password}</div>}
        <input
          type="password"
          name="confirmPassword"
          placeholder="Confirm Password"
          value={confirmPassword}
          onChange={handleChange}
          required
          className="login-input"
        />
        {validationErrors.confirmPassword && <div className="error-message">{validationErrors.confirmPassword}</div>}
        <select
          name="role"
          value={credentials.role}
          onChange={handleChange}
          required
          className="login-input"
        >
          <option value="student">Student</option>
          <option value="teacher">Teacher</option>
        </select>
        <button type="submit" className="login-button">Register</button>
      </form>
      <p>
        Already have an account? <Link to="/login">Sign in</Link>
      </p>
      {registrationError && (
        <p className="error-message">{registrationError}</p>
      )}
    </div>
  );
};

export default Register;
